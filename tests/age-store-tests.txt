# Create test user with unencrypted key
>@ setup_user
$. age-store.py --user-secret user-secrets/user1.age init-user --unencrypted
?. stdout "User initialization complete"
?. stdout "Age public key:"
?. file "user-secrets/user1.age"

>@ setup_store
:. @ setup_user
# Bootstrap store with test user
$. age-store.py --user-secret user-secrets/user1.age admin bootstrap user1
?. stdout "Bootstrap complete"
?. file "store"
?. file "users.json"
?. file "master-key.age.enc"

>@ create_test_file
# Create a test file with known content
:. file "test-data.txt"
.. Hello, World!
.. This is test content.

> User Initialization
# Test basic user initialization functionality
$. age-store.py --user-secret user-secrets/init-test.age init-user --unencrypted
?. stdout "User initialization complete"
?. stdout "Age public key: age1"
?. file "user-secrets/init-test.age"

> Show Public Key
:. @ setup_user
# Test showing user's public key
$. age-store.py --user-secret user-secrets/user1.age show-pubkey
?. stdout "age1"
?! stderr "Error"

> Store Bootstrap
:. @ setup_user
# Test bootstrapping a new store
$. age-store.py --user-secret user-secrets/user1.age admin bootstrap user1
?. stdout "Bootstrap complete"
?. file "store"
?. file "users.json"
?. file "master-key.age.enc"

> Add File Basic
:. @ setup_store
:. @ create_test_file
# Test adding a file to the store
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
?. stdout "added to secret store"
?. file "store/test-data.txt.enc"

> List Files Empty
:. @ setup_store
# Test listing files when store is empty
$. age-store.py --user-secret user-secrets/user1.age ls
?. stdout ""

> List Files With Content
:. @ setup_store
:. @ create_test_file
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
# Test listing files when store has files
$. age-store.py --user-secret user-secrets/user1.age ls
?. stdout "test-data.txt"

> View File Content
:. @ setup_store
:. @ create_test_file
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
# Test viewing file content from store
$. age-store.py --user-secret user-secrets/user1.age view test-data.txt
?. stdout
.. Hello, World!
.. This is test content.

> Add File Duplicate Without Force
:. @ setup_store
:. @ create_test_file
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
# Test adding duplicate file without --force flag fails
$! age-store.py --user-secret user-secrets/user1.age add test-data.txt
?. stderr "already exists"
?. stderr "--force"

> Add File Duplicate With Force
:. @ setup_store
:. @ create_test_file
# Test adding duplicate file with --force flag succeeds
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
# Modify the test file
:. file "test-data.txt"
.. Modified content
$. age-store.py --user-secret user-secrets/user1.age add --force test-data.txt
?. stdout "added to secret store"
$. age-store.py --user-secret user-secrets/user1.age view test-data.txt
?. stdout
.. Modified content

> List Users Single User
:. @ setup_store
# Test listing users with one user
$. age-store.py --user-secret user-secrets/user1.age admin list-users
?. stdout "user1"

>@ add_second_user
# Initialize second user
$. age-store.py --user-secret user-secrets/user2.age init-user --unencrypted
?. stdout "User initialization complete"
# Get user2's public key and add to store
$. age-store.py --user-secret user-secrets/user2.age show-pubkey
:. stdout @user2_pubkey
$. age-store.py --user-secret user-secrets/user1.age admin add-user user2 @user2_pubkey
?. stdout "User user2 added"

> Add Second User
:. @ setup_store
:. @ add_second_user

> List Users Multiple Users
:. @ setup_store
:. @ add_second_user
# Test listing multiple users
$. age-store.py --user-secret user-secrets/user1.age admin list-users
?. stdout "user1"
?. stdout "user2"

> Second User File Access
:. @ setup_store
:. @ add_second_user
:. @ create_test_file
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
# Test that second user can access files
$. age-store.py --user-secret user-secrets/user2.age view test-data.txt
?. stdout
.. Hello, World!
.. This is test content.

> Master Key Rotation
:. @ setup_store
:. @ create_test_file
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
# Test master key rotation functionality
$. age-store.py --user-secret user-secrets/user1.age admin rotate-master-key
?. stdout "Re-encrypting secrets"
?. stdout "rotation complete"
# Verify files still accessible
$. age-store.py --user-secret user-secrets/user1.age view test-data.txt
?. stdout
.. Hello, World!
.. This is test content.

> Remove User Access Denied
:. @ setup_store
:. @ add_second_user
:. @ create_test_file
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
# Remove user2
$. age-store.py --user-secret user-secrets/user1.age admin remove-user user2
?. stdout "Removed user2's access"
# Verify user1 can still list users after removal
$. age-store.py --user-secret user-secrets/user1.age admin list-users
?! stdout "user2"
?. stdout "user1"
# Test that removed users cannot access files
$! age-store.py --user-secret user-secrets/user2.age ls
?. stderr "Access denied"

> Remove User Add Operation Denied
:. @ setup_store
:. @ add_second_user
$. age-store.py --user-secret user-secrets/user1.age admin remove-user user2
:. @ create_test_file
# Test that removed users cannot add files
$! age-store.py --user-secret user-secrets/user2.age add test-data.txt
?. stderr "Access denied"
# Verify no encrypted file was created despite denial
?! file "store/test-data.txt.enc"

> Remove User View Operation Denied
:. @ setup_store
:. @ add_second_user
:. @ create_test_file
$. age-store.py --user-secret user-secrets/user1.age add test-data.txt
$. age-store.py --user-secret user-secrets/user1.age admin remove-user user2
# Test that removed users cannot view files
$! age-store.py --user-secret user-secrets/user2.age view test-data.txt
?. stderr "Access denied"

> Remove User Admin Operations Denied
:. @ setup_store
:. @ add_second_user
$. age-store.py --user-secret user-secrets/user1.age admin remove-user user2
# Test that removed users can still list users but don't see themselves
$. age-store.py --user-secret user-secrets/user2.age admin list-users
?! stdout "user2"
?. stdout "user1"
# Test that removed users cannot add users
$! age-store.py --user-secret user-secrets/user2.age admin add-user dummy age1dummy
?. stderr "Access denied"
# Test that removed users cannot rotate master key
$! age-store.py --user-secret user-secrets/user2.age admin rotate-master-key
?. stderr "Access denied"
# Verify store state unchanged after failed admin operations
$. age-store.py --user-secret user-secrets/user1.age admin list-users
?! stdout "dummy"
?! stdout "user2"
?. stdout "user1"

> File Not Found Error
:. @ setup_store
# Test error handling for non-existent files
$! age-store.py --user-secret user-secrets/user1.age view nonexistent.txt
?. stderr "not found"

> Invalid User Secret
# Test error handling for invalid user secret
$! age-store.py --user-secret nonexistent.age show-pubkey
?. stderr "not found"

> Encrypted User Initialization
# Test user initialization with encrypted key
$. age-store.py --user-secret user-secrets/encrypted-user.age.enc init-user
$< Enter passphrase
$> testpassword123
$< Confirm passphrase
$> testpassword123
?. stdout "User initialization complete"
?. stdout "Age public key: age1"
?. file "user-secrets/encrypted-user.age.enc"

> Encrypted User Show Pubkey
# Test showing pubkey with encrypted user key
$. age-store.py --user-secret user-secrets/encrypted-user2.age.enc init-user
$< Enter passphrase
$> testpassword123
$< Confirm passphrase
$> testpassword123
# Now test showing the public key
$. age-store.py --user-secret user-secrets/encrypted-user2.age.enc show-pubkey
$< Enter passphrase
$> testpassword123
?. stdout "age1"
?! stderr "Error"
?! stderr "Warning"

> Encrypted User Wrong Password
# Test error handling for wrong password
$. age-store.py --user-secret user-secrets/encrypted-user3.age.enc init-user
$< Enter passphrase
$> testpassword123
$< Confirm passphrase
$> testpassword123
# Try to show pubkey with wrong password
$! age-store.py --user-secret user-secrets/encrypted-user3.age.enc show-pubkey
$< Enter passphrase
$> wrongpassword
?. stdout "Failed to decrypt"

> User Secret Extension Validation Encrypted
# Test that encrypted secrets must end with .enc
$! age-store.py --user-secret user-secrets/bad-encrypted.age init-user
?. stderr ".enc"

> User Secret Extension Validation Unencrypted
# Test that unencrypted secrets must not end with .enc
$! age-store.py --user-secret user-secrets/bad-unencrypted.age.enc init-user --unencrypted
?. stderr ".enc"

> Version Command
# Test version command shows version info
$. age-store.py version
?. stdout "age-store"

> Unencrypted Key Warning
# Test that unencrypted keys show warning
$. age-store.py --user-secret user-secrets/warning-test.age init-user --unencrypted
?. stdout "User initialization complete"
?. stdout "unencrypted"

> Multi File Listing
:. @ setup_store
:. file "test-file1.txt"
.. Content of file 1
:. file "test-file2.txt" 
.. Content of file 2
:. file "test-file3.txt"
.. Content of file 3
# Add multiple files
$. age-store.py --user-secret user-secrets/user1.age add test-file1.txt
$. age-store.py --user-secret user-secrets/user1.age add test-file2.txt
$. age-store.py --user-secret user-secrets/user1.age add test-file3.txt
# Test that all files show in listing
$. age-store.py --user-secret user-secrets/user1.age ls
?. stdout "test-file1.txt"
?. stdout "test-file2.txt" 
?. stdout "test-file3.txt"

> Migrate Encrypt User Secret
# Test migrating unencrypted user secret to encrypted
$. age-store.py --user-secret user-secrets/migrate-test.age init-user --unencrypted
?. file "user-secrets/migrate-test.age"
# Encrypt the user secret
$. age-store.py --user-secret user-secrets/migrate-test.age migrate encrypt-user-secret 
$< Enter passphrase
$> testpassword123
$< Confirm passphrase
$> testpassword123
?. stdout "Migrated"
?. file "user-secrets/migrate-test.age.enc"
?! file "user-secrets/migrate-test.age"
# Now test show-pubkey requires password
$. age-store.py --user-secret user-secrets/migrate-test.age.enc show-pubkey
$< Enter passphrase
$> testpassword123
?. stdout "age1"
?! stderr "Error"

> Init User Duplicate Secret Handling (unencrypted)
# Test unencrypted init twice with default secret location
$. age-store.py init-user --unencrypted
?. stdout "User initialization complete"
?. file "user-secret.age"
$! age-store.py init-user --unencrypted
?. stderr "User secret already exists"
# Test unencrypted init twice with explicit user secret
$. age-store.py --user-secret user-secrets/duplicate-test.age init-user --unencrypted
?. stdout "User initialization complete"
?. file "user-secrets/duplicate-test.age"
$! age-store.py --user-secret user-secrets/duplicate-test.age init-user --unencrypted
?. stderr "User secret already exists"


> Init User Duplicate Secret Handling (encrypted)
# Test encrypted init twice with default secret location
$. age-store.py init-user
$< Enter passphrase
$> testpassword123
$< Confirm passphrase
$> testpassword123
?. stdout "User initialization complete"
?. file "user-secret.age.enc"
$! age-store.py init-user
?. stderr "User secret already exists"
# Test encrypted init twice with explicit user secret
$. age-store.py --user-secret user-secrets/encrypted-duplicate-test.age.enc init-user
$< Enter passphrase
$> testpassword123
$< Confirm passphrase
$> testpassword123
?. stdout "User initialization complete"
?. file "user-secrets/encrypted-duplicate-test.age.enc"
$! age-store.py --user-secret user-secrets/encrypted-duplicate-test.age.enc init-user
?. stderr "User secret already exists"

> Bundle Multiple Files
:. @ setup_store
# Create multiple test files
:. file "bundle-test1.txt"
.. First file content
.. Line 2 of first file
:. file "bundle-test2.txt"
.. Second file content
..
:. file "bundle-test3.txt"
.. Third file with more content
.. Another line here
.. Final line
# Add files to store
$. age-store.py --user-secret user-secrets/user1.age add bundle-test1.txt
$. age-store.py --user-secret user-secrets/user1.age add bundle-test2.txt  
$. age-store.py --user-secret user-secrets/user1.age add bundle-test3.txt
# Test bundle command with multiple files
$. age-store.py --user-secret user-secrets/user1.age bundle bundle-test1.txt bundle-test2.txt bundle-test3.txt
?. stdout
.. -- 39 bundle-test1.txt
.. First file content
.. Line 2 of first file
.. -- 20 bundle-test2.txt
.. Second file content
..
.. -- 57 bundle-test3.txt
.. Third file with more content
.. Another line here
.. Final line

> Bundle Single File
:. @ setup_store
:. file "single-bundle.txt"
.. Single file for bundle test
$. age-store.py --user-secret user-secrets/user1.age add single-bundle.txt
# Test bundle command with single file
$. age-store.py --user-secret user-secrets/user1.age bundle single-bundle.txt
?. stdout
.. -- 27 single-bundle.txt
.. Single file for bundle test

> Bundle Nonexistent File Error
:. @ setup_store
# Test bundle with nonexistent file
$! age-store.py --user-secret user-secrets/user1.age bundle nonexistent.txt
?. stderr "not found"

> Env Shell Basic
:. @ setup_store
# Create env file and secrets for testing
:. file "secret1.txt"
.. secret_value_1
:. file "secret2.txt"
.. secret_value_2
$. age-store.py --user-secret user-secrets/user1.age add secret1.txt
$. age-store.py --user-secret user-secrets/user1.age add secret2.txt
# Create environment file
:. file "test.env"
.. FOO=secret1.txt
.. BAR=secret2.txt
# Test env-shell with printenv
$. age-store.py --user-secret user-secrets/user1.age env-shell test.env --shell /bin/sh -- -c 'printenv FOO BAR'
?. stdout
.. secret_value_1
.. secret_value_2
..

> Env Shell With Hook
:. @ setup_store
# Create env file and secrets for testing
:. file "secret1.txt"
.. secret_value_1
:. file "secret2.txt"
.. secret_value_2
$. age-store.py --user-secret user-secrets/user1.age add secret1.txt
$. age-store.py --user-secret user-secrets/user1.age add secret2.txt
# Create environment file
:. file "test.env"
.. FOO=secret1.txt
.. BAR=secret2.txt
# Create hook script that computes values from existing secrets
:. file "test-hook.sh"
.. #!/bin/sh
.. echo "HOOK_VAR=hook_value"
.. echo "COMBINED_SECRETS=${FOO}_${BAR}"
.. echo "SECRET_COUNT=$(echo "$FOO $BAR" | wc -w)"
$. chmod +x "test-hook.sh"
# Test env-shell with hook that computes values from existing secrets
$. age-store.py --user-secret user-secrets/user1.age env-shell test.env --hook ./test-hook.sh --shell /bin/sh -- -c 'printenv FOO BAR HOOK_VAR COMBINED_SECRETS SECRET_COUNT'
?. stdout
.. secret_value_1
.. secret_value_2
.. hook_value
.. secret_value_1_secret_value_2
.. 2
..

> Env Shell Hook Error Exit Code
:. @ setup_store
# Create env file and secrets
:. file "secret1.txt"
.. secret_value_1
$. age-store.py --user-secret user-secrets/user1.age add secret1.txt
:. file "test.env"
.. FOO=secret1.txt
# Create hook script that exits with error
:. file "failing-hook.sh"
.. #!/bin/sh
.. echo "This should not appear"
.. exit 1
$. chmod +x "failing-hook.sh"
# Test that hook failure causes env-shell to fail
$! age-store.py --user-secret user-secrets/user1.age env-shell test.env --hook ./failing-hook.sh
?. stderr "Hook script exited with code 1"

> Env Shell Hook Nonexistent Script
:. @ setup_store
# Create basic env file
:. file "secret1.txt"
.. secret_value_1
$. age-store.py --user-secret user-secrets/user1.age add secret1.txt
:. file "test.env"
.. FOO=secret1.txt
# Test with nonexistent hook script
$! age-store.py --user-secret user-secrets/user1.age env-shell test.env --hook ./nonexistent-hook.sh
?. stderr "Hook script not found"

> Env Shell Hook Invalid Output Format
:. @ setup_store
# Create basic env file
:. file "secret1.txt"
.. secret_value_1
$. age-store.py --user-secret user-secrets/user1.age add secret1.txt
:. file "test.env"
.. FOO=secret1.txt
# Create hook script with invalid output format
:. file "invalid-hook.sh"
.. #!/bin/sh
.. echo "VALID_VAR=valid_value"
.. echo "invalid_line_no_equals"
.. echo "ANOTHER_VALID=another_value"
.. echo ""
.. echo "=empty_name"
$. chmod +x "invalid-hook.sh"
# Test that hook with invalid lines still works for valid lines
$. age-store.py --user-secret user-secrets/user1.age env-shell test.env --hook ./invalid-hook.sh --shell /bin/sh -- -c 'printenv FOO VALID_VAR ANOTHER_VALID'
?. stdout
.. secret_value_1
.. valid_value
.. another_value
..
?. stderr "Warning: Hook output line ignored"
